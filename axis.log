2020-01-06 15:12:31,761 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-06 15:12:34,656 2895   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:34,741 2980   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,099 3338   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,157 3396   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,167 3406   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,177 3416   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,187 3426   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,187 3426   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to url dubbo://192.168.157.1:53660/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53660&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,187 3426   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service UserService url dubbo://192.168.157.1:53660/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53660&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=8008&registry=zookeeper&timestamp=1578294755105, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,194 3433   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,206 3445   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,226 3465   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,245 3484   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,281 3520   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,330 3569   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,600 3839   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53660, export /192.168.157.1:53660, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,608 3847   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,625 3864   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {UserService=empty://192.168.157.1:53619/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=10020&side=provider&timestamp=1577536501130, UserService=empty://192.168.157.1:53632/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,636 3875   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,680 3919   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53660/UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,694 3933   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,709 3948   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, urls: [empty://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,710 3949   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,710 3949   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, override urls: [empty://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,716 3955   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:12:35,722 3961   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,179 171418 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,180 171419 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8008&timestamp=1578294755105], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,180 171419 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8008&timestamp=1578294755105, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,180 171419 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53660/UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,180 171419 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,185 171424 [      Thread-18] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8008&timestamp=1578294755105], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,188 171427 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53660, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:23,190 171429 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53660, export /192.168.157.1:53660, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:30,600 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-06 15:15:33,078 2478   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,157 2557   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,406 2806   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,451 2851   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,461 2861   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,471 2871   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,481 2881   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,481 2881   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to url dubbo://192.168.157.1:53616/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53616&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,481 2881   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service UserService url dubbo://192.168.157.1:53616/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53616&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=12148&registry=zookeeper&timestamp=1578294933411, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,488 2888   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,501 2901   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,521 2921   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,536 2936   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,545 2945   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,574 2974   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,820 3220   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53616, export /192.168.157.1:53616, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,826 3226   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,838 3238   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {UserService=empty://192.168.157.1:53660/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,saveUser,deleteUserById&pid=8008&side=provider&timestamp=1578294755108, UserService=empty://192.168.157.1:53632/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,846 3246   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,890 3290   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53616/UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,902 3302   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,916 3316   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, urls: [empty://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,917 3317   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,918 3318   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, override urls: [empty://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,925 3325   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:15:33,931 3331   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,344 111744 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,384 111784 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=12148&timestamp=1578294933411], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,384 111784 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=12148&timestamp=1578294933411, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,385 111785 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53616/UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,385 111785 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,391 111791 [      Thread-17] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=12148&timestamp=1578294933411], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,579 111979 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53616, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:17:22,580 111980 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53616, export /192.168.157.1:53616, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:51,184 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-06 15:19:53,772 2588   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:53,875 2691   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:53,976 2792   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,034 2850   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,058 2874   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,077 2893   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,088 2904   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,089 2905   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service UserService to url dubbo://192.168.157.1:53667/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53667&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,089 2905   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service UserService url dubbo://192.168.157.1:53667/UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53667&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=4160&registry=zookeeper&timestamp=1578295193982, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,095 2911   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,108 2924   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,130 2946   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,144 2960   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,174 2990   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,207 3023   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,267 3083   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53667, export /192.168.157.1:53667, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,277 3093   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,294 3110   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {UserService=empty://192.168.157.1:53616/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,saveUser,deleteUserById,updateById&pid=12148&side=provider&timestamp=1578294933413, UserService=empty://192.168.157.1:53632/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,301 3117   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,518 3334   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53667/UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,535 3351   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,551 3367   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, urls: [empty://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,552 3368   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,552 3368   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, override urls: [empty://192.168.157.1:53667/UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,559 3375   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-06 15:19:54,569 3385   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:48,880 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-24 15:36:52,261 3381   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,339 3459   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,438 3558   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,507 3627   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,533 3653   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,562 3682   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,593 3713   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,596 3716   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53630&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,596 3716   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53630&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=248&registry=zookeeper&timestamp=1579851412442, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,611 3731   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,629 3749   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,660 3780   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,684 3804   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,699 3819   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,743 3863   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,816 3936   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53630, export /192.168.157.1:53630, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,826 3946   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,842 3962   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:36:52,849 3969   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,044 13164  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,058 13178  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,069 13189  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, urls: [empty://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,069 13189  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,069 13189  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, override urls: [empty://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,074 13194  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-24 15:37:02,081 13201  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:46:45,349 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 11:46:48,587 3238   [           main] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:46:48,588 3239   [           main] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:46:48,758 3409   [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:47:30,253 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 11:47:34,282 4029   [           main] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:47:34,283 4030   [           main] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:47:34,571 4318   [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:17,413 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 11:52:22,051 4638   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,196 4783   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,638 5225   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,732 5319   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,749 5336   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,768 5355   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,857 5444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,857 5444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53612&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,857 5444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53612&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=11372&registry=zookeeper&timestamp=1580010742650, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,873 5460   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,900 5487   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,944 5531   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,970 5557   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:22,987 5574   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,036 5623   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,348 5935   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53612, export /192.168.157.1:53612, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,359 5946   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,374 5961   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53630/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=248&side=provider&timestamp=1579851412444, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,385 5972   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,439 6026   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,456 6043   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,476 6063   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, urls: [empty://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,477 6064   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,477 6064   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, override urls: [empty://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,486 6073   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 11:52:23,496 6083   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,916 630503 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,930 630517 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11372&timestamp=1580010742650], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,931 630518 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11372&timestamp=1580010742650, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,934 630521 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,936 630523 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:47,976 630563 [      Thread-22] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11372&timestamp=1580010742650], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:57,790 640377 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53612, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:02:57,969 640556 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53612, export /192.168.157.1:53612, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:28,843 1      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:07:32,374 3532   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:32,478 3636   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:32,885 4043   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:32,958 4116   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:32,972 4130   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:32,986 4144   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,001 4159   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,002 4160   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53656&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,002 4160   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53656&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=14160&registry=zookeeper&timestamp=1580011652892, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,011 4169   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,032 4190   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,065 4223   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,099 4257   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,132 4290   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,248 4406   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,487 4645   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53656, export /192.168.157.1:53656, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,493 4651   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,509 4667   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53612/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11372&side=provider&timestamp=1580010742654, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:33,521 4679   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,622 13780  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,638 13796  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,655 13813  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, urls: [empty://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,656 13814  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,656 13814  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, override urls: [empty://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,663 13821  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:07:42,669 13827  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,772 113930 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,773 113931 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14160&timestamp=1580011652892], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,773 113931 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14160&timestamp=1580011652892, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,773 113931 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,774 113932 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,782 113940 [      Thread-37] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14160&timestamp=1580011652892], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,787 113945 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53656, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:22,791 113949 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53656, export /192.168.157.1:53656, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:30,735 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:09:33,427 2692   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,509 2774   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,772 3037   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,819 3084   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,829 3094   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,839 3104   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,868 3133   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,868 3133   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,868 3133   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=11792&registry=zookeeper&timestamp=1580011773777, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,873 3138   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,885 3150   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,905 3170   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,919 3184   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:33,928 3193   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,110 3375   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,147 3412   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,153 3418   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,165 3430   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,172 3437   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,214 3479   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,227 3492   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,240 3505   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,241 3506   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,241 3506   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,248 3513   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:09:34,254 3519   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:48,833 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:21:50,574 739839 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,575 739840 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11792&timestamp=1580011773777], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,575 739840 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11792&timestamp=1580011773777, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,576 739841 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,576 739841 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,583 739848 [      Thread-18] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11792&timestamp=1580011773777], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,585 739850 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:50,588 739853 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:52,661 3828   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:52,782 3949   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,114 4281   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,167 4334   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,177 4344   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,187 4354   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,196 4363   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,196 4363   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,197 4364   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=4560&registry=zookeeper&timestamp=1580012513121, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,209 4376   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,221 4388   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,269 4436   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,283 4450   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,293 4460   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,336 4503   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,528 4695   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,533 4700   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,549 4716   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=11792&side=provider&timestamp=1580011773779, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,563 4730   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,619 4786   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,636 4803   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,659 4826   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,660 4827   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,660 4827   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,668 4835   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:21:53,674 4841   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,977 1704144 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,980 1704147 [      Thread-20] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Unregister: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,981 1704148 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=4560&timestamp=1580012513121], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,981 1704148 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=4560&timestamp=1580012513121, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,981 1704148 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:12,994 1704161 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:13,003 1704170 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:13,004 1704171 [      Thread-20] WARN  y.integration.RegistryProtocol  -  [DUBBO] Failed to unregister dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to registry 192.168.157.158:2181, cause: Failed to unregister dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to zookeeper zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=4560&timestamp=1580012513121, cause: ZkClient already closed!, dubbo version: 2.6.0, current host: 127.0.0.1
java.lang.IllegalStateException: Failed to unregister dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to registry 192.168.157.158:2181, cause: Failed to unregister dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to zookeeper zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=4560&timestamp=1580012513121, cause: ZkClient already closed!
	at com.alibaba.dubbo.registry.support.FailbackRegistry.unregister(FailbackRegistry.java:182)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol$1.unexport(RegistryProtocol.java:158)
	at com.alibaba.dubbo.config.ServiceConfig.unexport(ServiceConfig.java:343)
	at com.alibaba.dubbo.config.spring.ServiceBean.destroy(ServiceBean.java:266)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:272)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:583)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:555)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:954)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:961)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1034)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1009)
	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929)
Caused by: com.alibaba.dubbo.rpc.RpcException: Failed to unregister dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123 to zookeeper zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=4560&timestamp=1580012513121, cause: ZkClient already closed!
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doUnregister(ZookeeperRegistry.java:120)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.unregister(FailbackRegistry.java:169)
	... 12 more
Caused by: java.lang.IllegalStateException: ZkClient already closed!
	at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:988)
	at org.I0Itec.zkclient.ZkClient.delete(ZkClient.java:1048)
	at org.I0Itec.zkclient.ZkClient.delete(ZkClient.java:1043)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkClientWrapper.delete(ZkClientWrapper.java:109)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperClient.delete(ZkclientZookeeperClient.java:75)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doUnregister(ZookeeperRegistry.java:118)
	... 13 more
2020-01-26 12:50:13,012 1704179 [      Thread-20] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:32,630 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:50:37,472 4842   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:37,658 5028   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:37,942 5312   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,054 5424   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,071 5441   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,091 5461   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,108 5478   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,108 5478   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,109 5479   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=7272&registry=zookeeper&timestamp=1580014237948, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,129 5499   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,151 5521   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,194 5564   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,249 5619   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,267 5637   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:38,823 6193   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:39,732 7102   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:39,757 7127   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:39,782 7152   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=4560&side=provider&timestamp=1580012513123, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:39,811 7181   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:39,996 7366   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,095 7465   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,239 7609   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,242 7612   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,242 7612   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,264 7634   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:50:40,279 7649   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,795 114165 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,796 114166 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7272&timestamp=1580014237948], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,796 114166 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7272&timestamp=1580014237948, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,796 114166 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,797 114167 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,801 114171 [      Thread-24] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7272&timestamp=1580014237948], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,820 114190 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:26,824 114194 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:37,750 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:52:42,841 5091   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,059 5309   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,517 5767   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,622 5872   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,639 5889   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,681 5931   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,699 5949   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,699 5949   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,700 5950   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=13364&registry=zookeeper&timestamp=1580014363527, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,729 5979   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,767 6017   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,867 6117   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,898 6148   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:43,926 6176   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:44,036 6286   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:44,358 6608   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:44,376 6626   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:44,397 6647   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7272&side=provider&timestamp=1580014237954, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:44,415 6665   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,860 16110  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,886 16136  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,920 16170  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,922 16172  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,922 16172  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,937 16187  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:52:53,948 16198  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,629 117879 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,630 117880 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13364&timestamp=1580014363527], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,630 117880 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13364&timestamp=1580014363527, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,631 117881 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,631 117881 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,637 117887 [      Thread-40] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13364&timestamp=1580014363527], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,640 117890 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:35,642 117892 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:44,542 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:54:49,607 5065   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:49,857 5315   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,574 6032   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,679 6137   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,724 6182   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,746 6204   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,777 6235   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,777 6235   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,777 6235   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=8076&registry=zookeeper&timestamp=1580014490580, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,799 6257   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,817 6275   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,855 6313   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,887 6345   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:50,912 6370   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:51,304 6762   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:51,553 7011   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:51,566 7024   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:51,583 7041   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,updateById,saveUser&pid=13364&side=provider&timestamp=1580014363531, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:54:51,602 7060   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,710 16168  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,737 16195  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,905 16363  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,908 16366  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,909 16367  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,920 16378  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:00,933 16391  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,776 40234  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,777 40235  [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8076&timestamp=1580014490580], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,777 40235  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8076&timestamp=1580014490580, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,778 40236  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,778 40236  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,784 40242  [      Thread-42] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8076&timestamp=1580014490580], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,787 40245  [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:24,793 40251  [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:32,258 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 12:55:35,723 3465   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:35,872 3614   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,155 3897   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,223 3965   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,236 3978   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,249 3991   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,261 4003   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,261 4003   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,261 4003   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=7680&registry=zookeeper&timestamp=1580014536160, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,271 4013   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,288 4030   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,326 4068   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,352 4094   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,368 4110   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,599 4341   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,700 4442   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,708 4450   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,719 4461   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8076&side=provider&timestamp=1580014490585, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:36,731 4473   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,837 13579  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,859 13601  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,884 13626  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,885 13627  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,886 13628  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,898 13640  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:55:45,907 13649  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,107 205849 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,108 205850 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7680&timestamp=1580014536160], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,108 205850 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7680&timestamp=1580014536160, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,108 205850 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,109 205851 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,112 205854 [      Thread-37] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=7680&timestamp=1580014536160], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,120 205862 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 12:58:58,122 205864 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:03,805 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:00:05,906 2101   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:05,975 2170   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,065 2260   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,106 2301   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,120 2315   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,135 2330   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,152 2347   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,152 2347   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,153 2348   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&bind.ip=192.168.157.1&bind.port=20880&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=manage-service&client=zkclient&dubbo=2.6.0&pid=8828&registry=zookeeper&timestamp=1580014806070, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,160 2355   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,176 2371   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,215 2410   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,232 2427   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,244 2439   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,272 2467   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,503 2698   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.157.1:20880, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,508 2703   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,518 2713   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-manage-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.cart.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SpuListService&methods=saveSpuInfo,spuList,saleAttrList,spuSaleAttrListCheckBySku,fileUpload&pid=12776&side=provider&timestamp=1579851607655, com.yuan.gmall.service.SkuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuById,getSkuSaleAttrValueListBySpu,saveSkuInfo&pid=10016&side=provider&timestamp=1579844525294, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:53625/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=10016&side=provider&timestamp=1579844525250, com.yuan.gmall.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=9708&side=provider&timestamp=1579503296476, com.yuan.gmall.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=9708&side=provider&timestamp=1579503296453, com.yuan.gmall.service.SpuService=empty://192.168.157.1:53625/com.yuan.gmall.service.SpuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuService&methods=saveSpuInfo,spuImageList,spuList,spuSaleAttrListCheckBySku,spuSaleAttrList&pid=10016&side=provider&timestamp=1579844525350, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=7680&side=provider&timestamp=1580014536163, com.yuan.gmall.cart.service.CatalogService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.CatalogService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.CatalogService&methods=getCatalog3,getCatalog1,getCatalog2&pid=12776&side=provider&timestamp=1579851607591, com.yuan.gmall.cart.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=12776&side=provider&timestamp=1579851597812, com.yuan.gmall.cart.service.SkuService=empty://192.168.157.1:20880/com.yuan.gmall.cart.service.SkuService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.SkuService&methods=getAllSku,getSkuId,insertSkuInfo,getSkuSaleAttrValueList&pid=12776&side=provider&timestamp=1579851607629, com.yuan.gmall.service.AttrService=empty://192.168.157.1:20880/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=saveAttr,baseSaleAttrList,getAttrValueListByValueId,attrValueList,attrList&pid=9708&side=provider&timestamp=1579503284598, com.yuan.gmall.service.AttrService=empty://192.168.157.1:53625/com.yuan.gmall.service.AttrService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.AttrService&methods=baseSaleAttrList,getAttrValueListByValueId,saveAttrInfo,getAttrValueList,attrInfoList&pid=10016&side=provider&timestamp=1579844515821, com.yuan.gmall.service.SpuListService=empty://192.168.157.1:20880/com.yuan.gmall.service.SpuListService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.SpuListService&methods=saveSpuInfo,spuList,spuSaleAttrListCheckBySku,saleAttrList,fileUpload&pid=9708&side=provider&timestamp=1579503296493}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:06,525 2720   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,602 11797  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,615 11810  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,630 11825  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071, urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,630 11825  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,630 11825  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071, override urls: [empty://192.168.157.1:20880/com.yuan.gmall.cart.service.UserService?anyhost=true&application=manage-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,saveUser,deleteUserById,updateById&pid=8828&side=provider&timestamp=1580014806071], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,636 11831  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:00:15,645 11840  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:42,909 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:16:45,902 2993   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:45,994 3085   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,270 3361   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,320 3411   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,330 3421   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,343 3434   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,353 3444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,353 3444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53601&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,353 3444   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53601&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=13548&registry=zookeeper&timestamp=1580015806276, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,360 3451   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,372 3463   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,394 3485   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,409 3500   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,419 3510   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,635 3726   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,673 3764   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53601, export /192.168.157.1:53601, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,678 3769   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,689 3780   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53656/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=14160&side=provider&timestamp=1580011652894, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,697 3788   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,740 3831   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,752 3843   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,766 3857   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, urls: [empty://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,767 3858   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,767 3858   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, override urls: [empty://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,774 3865   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:16:46,780 3871   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,948 133039 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,949 133040 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13548&timestamp=1580015806276], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,949 133040 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13548&timestamp=1580015806276, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,950 133041 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,950 133041 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,957 133048 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53601, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,963 133054 [      Thread-16] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:18:55,965 133056 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53601, export /192.168.157.1:53601, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:06,319 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:19:19,966 13647  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,153 13834  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,457 14138  [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.cart.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,599 14280  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,635 14316  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,679 14360  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,720 14401  [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,721 14402  [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.cart.service.UserService to url dubbo://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53631&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,721 14402  [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.cart.service.UserService url dubbo://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53631&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=11228&registry=zookeeper&timestamp=1580015960465, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,745 14426  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,771 14452  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,817 14498  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,867 14548  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,895 14576  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:20,959 14640  [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,248 14929  [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53631, export /192.168.157.1:53631, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,259 14940  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,275 14956  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53601/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=13548&side=provider&timestamp=1580015806278, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,292 14973  [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,369 15050  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,394 15075  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,419 15100  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, urls: [empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,420 15101  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,420 15101  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, override urls: [empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,434 15115  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:19:21,442 15123  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,505 209186 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,507 209188 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11228&timestamp=1580015960465], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,507 209188 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11228&timestamp=1580015960465, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,507 209188 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,508 209189 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,514 209195 [      Thread-43] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=11228&timestamp=1580015960465], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,521 209202 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53631, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:35,523 209204 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53631, export /192.168.157.1:53631, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:51,892 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:22:57,175 5283   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:57,496 5604   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,162 6270   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,291 6399   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,315 6423   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,341 6449   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,424 6532   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,424 6532   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to url dubbo://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53675&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,424 6532   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.service.UserService url dubbo://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53675&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=14472&registry=zookeeper&timestamp=1580016178170, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,440 6548   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,475 6583   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,533 6641   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,579 6687   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,599 6707   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,658 6766   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,875 6983   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53675, export /192.168.157.1:53675, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,894 7002   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,913 7021   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53667/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,updateById,deleteUserById,saveUser&pid=4160&side=provider&timestamp=1578295193984, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:58,943 7051   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,047 7155   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,081 7189   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,140 7248   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, urls: [empty://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,144 7252   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,145 7253   [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, override urls: [empty://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,164 7272   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:22:59,181 7289   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,413 615521 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,414 615522 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14472&timestamp=1580016178170], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,414 615522 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14472&timestamp=1580016178170, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,414 615522 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,414 615522 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,418 615526 [      Thread-23] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=14472&timestamp=1580016178170], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,426 615534 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53675, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:07,429 615537 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53675, export /192.168.157.1:53675, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:24,787 1      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:33:28,769 3983   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:28,954 4168   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,240 4454   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,315 4529   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,329 4543   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,343 4557   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,358 4572   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,358 4572   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to url dubbo://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53684&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,359 4573   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.service.UserService url dubbo://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53684&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=13348&registry=zookeeper&timestamp=1580016809245, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,378 4592   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,394 4608   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,431 4645   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,501 4715   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,522 4736   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,758 4972   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,852 5066   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53684, export /192.168.157.1:53684, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,860 5074   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,873 5087   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53675/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=14472&side=provider&timestamp=1580016178174, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:29,887 5101   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,007 15221  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,030 15244  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,054 15268  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, urls: [empty://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,056 15270  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,056 15270  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, override urls: [empty://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,068 15282  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:33:40,079 15293  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,538 339752 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,540 339754 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13348&timestamp=1580016809245], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,540 339754 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13348&timestamp=1580016809245, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,541 339755 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,541 339755 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,549 339763 [      Thread-41] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=13348&timestamp=1580016809245], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,556 339770 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53684, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:04,571 339785 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53684, export /192.168.157.1:53684, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:12,485 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:39:16,203 3718   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,345 3860   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,601 4116   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,664 4179   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,675 4190   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,687 4202   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,703 4218   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,704 4219   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to url dubbo://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53614&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,704 4219   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.service.UserService url dubbo://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53614&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=2944&registry=zookeeper&timestamp=1580017156605, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,714 4229   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,732 4247   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,787 4302   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,825 4340   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,847 4362   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:16,902 4417   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:17,168 4683   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53614, export /192.168.157.1:53614, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:17,176 4691   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:17,188 4703   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53684/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,saveUser,deleteUserById&pid=13348&side=provider&timestamp=1580016809249, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:17,201 4716   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,417 16932  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,439 16954  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,470 16985  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, urls: [empty://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,472 16987  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,472 16987  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, override urls: [empty://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,483 16998  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:29,492 17007  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,491 36006  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,492 36007  [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=2944&timestamp=1580017156605], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,493 36008  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=2944&timestamp=1580017156605, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,493 36008  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,494 36009  [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,503 36018  [      Thread-44] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=2944&timestamp=1580017156605], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,523 36038  [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53614, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:48,529 36044  [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53614, export /192.168.157.1:53614, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:39:56,677 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:40:00,102 3425   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,240 3563   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,522 3845   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] The service ready on spring started. service: com.yuan.gmall.service.UserService, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,592 3915   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,604 3927   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,616 3939   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,627 3950   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to local registry, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,627 3950   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Export dubbo service com.yuan.gmall.service.UserService to url dubbo://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53668&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,628 3951   [           main] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Register dubbo service com.yuan.gmall.service.UserService url dubbo://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&bind.ip=192.168.157.1&bind.port=53668&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530 to registry registry://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&pid=8640&registry=zookeeper&timestamp=1580017200527, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,642 3965   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,658 3981   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,711 4034   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,740 4063   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,757 4080   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:00,908 4231   [           main] DEBUG socket.nio.NioProviderMetadata  -  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:01,013 4336   [           main] INFO  oting.transport.AbstractServer  -  [DUBBO] Start NettyServer bind /0.0.0.0:53668, export /192.168.157.1:53668, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:01,025 4348   [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:01,037 4360   [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Load registry store file C:\Users\xjy\.dubbo\dubbo-registry-user-service-192.168.157.158:2181.cache, data: {com.yuan.gmall.service.UserService=empty://192.168.157.1:53614/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=2944&side=provider&timestamp=1580017156608, com.yuan.gmall.cart.service.UserService=empty://192.168.157.1:53631/com.yuan.gmall.cart.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.cart.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,deleteUserById,saveUser,updateById&pid=11228&side=provider&timestamp=1580015960470, com.yuan.gmall.service.UserService=empty://192.168.157.1:53632/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=getReceiveAddressByMemberId,getAllUser&pid=15392&side=provider&timestamp=1577434712007}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:01,050 4373   [           main] INFO  ommon.concurrent.ExecutionList  -  [DUBBO] Executor for listenablefuture is null, will use default executor!, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,270 13593  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Register: dubbo://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,293 13616  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Subscribe: provider://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,328 13651  [           main] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Notify urls for subscribe url provider://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, urls: [empty://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,330 13653  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] original override urls: [empty://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,331 13654  [           main] DEBUG y.integration.RegistryProtocol  -  [DUBBO] subscribe url: provider://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, override urls: [empty://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,342 13665  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:40:10,354 13677  [           main] DEBUG mmon.extension.ExtensionLoader  -  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,564 234887 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,566 234889 [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8640&timestamp=1580017200527], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,566 234889 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy registry:zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8640&timestamp=1580017200527, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,566 234889 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unregister url dubbo://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,567 234890 [bboShutdownHook] INFO  ry.zookeeper.ZookeeperRegistry  -  [DUBBO] Destroy unsubscribe url provider://192.168.157.1:53668/com.yuan.gmall.service.UserService?anyhost=true&application=user-service&category=configurators&check=false&default.service.filter=regerProviderFilter&dubbo=2.6.0&generic=false&interface=com.yuan.gmall.service.UserService&methods=selectAllUser,getReceiveAddressByMemberId,login,updateById,deleteUserById,saveUser&pid=8640&side=provider&timestamp=1580017200530, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,573 234896 [      Thread-37] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [zookeeper://192.168.157.158:2181/com.alibaba.dubbo.registry.RegistryService?application=user-service&client=zkclient&dubbo=2.6.0&interface=com.alibaba.dubbo.registry.RegistryService&pid=8640&timestamp=1580017200527], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,575 234898 [bboShutdownHook] INFO  c.protocol.dubbo.DubboProtocol  -  [DUBBO] Close dubbo server: /192.168.157.1:53668, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:43:51,578 234901 [bboShutdownHook] INFO  oting.transport.AbstractServer  -  [DUBBO] Close NettyServer bind /0.0.0.0:53668, export /192.168.157.1:53668, dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:44:00,054 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:44:39,573 39519  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:44:39,573 39519  [      Thread-16] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:44:39,574 39520  [      Thread-16] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:44:46,966 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:45:22,715 35749  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:45:22,715 35749  [      Thread-14] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:45:22,716 35750  [      Thread-14] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:46:52,163 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 13:48:25,895 93732  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:48:25,900 93737  [bboShutdownHook] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 13:48:25,902 93739  [      Thread-12] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:01:02,303 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 14:06:09,209 306906 [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:06:09,210 306907 [      Thread-17] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:06:09,211 306908 [      Thread-17] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:06:22,862 0      [           main] INFO  bo.common.logger.LoggerFactory  - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-01-26 14:07:02,014 39152  [bboShutdownHook] INFO  ba.dubbo.config.AbstractConfig  -  [DUBBO] Run shutdown hook now., dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:07:02,016 39154  [      Thread-20] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
2020-01-26 14:07:02,017 39155  [      Thread-20] INFO  upport.AbstractRegistryFactory  -  [DUBBO] Close all registries [], dubbo version: 2.6.0, current host: 127.0.0.1
